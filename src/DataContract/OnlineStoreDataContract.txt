//THIS IS THE ONLINE-STORE - REGISTER DATA CONTRACT

const Dash = require('dash');

const clientOpts = {
  network: 'testnet',//<- CHANGE***
  wallet: {
    mnemonic: 'Your 12 word mnemonic',//<- CHANGE***
    unsafeOptions: {
      skipSynchronizationBeforeHeight: 1029000, //<- CHANGE***
    },
  },
};

const client = new Dash.Client(clientOpts);

const registerContract = async () => {
  const { platform } = client;
  const identity = await platform.identities.get(
    'Your Identity Id',//<- CHANGE***
  );

  const contractDocuments = {
    about: {
      //About Info
      type: 'object',
      indices: [
        {
          //This is the FIND YOUR(Merchant) Store "About" Details -> DO i NEED THIS OR DOES IT AUTOMATICALLY HAVE THE OWNERID?? -> I THINK IT DOES.. <- WRONG
          name: 'ownerId',
          properties: [{ $ownerId: 'asc' }],
          unique: true, //<- SINGLETON
        },
      ],
      properties: {

        details: {
          type: 'string',
          minLength: 0,
          maxLength: 5120,
          position: 0,
        }, // JSON STRINGIFY AND PARSE
      },

      required: ['details', '$createdAt', '$updatedAt'],
      additionalProperties: false,
    },
    inventory: {
      type: 'object',
      indices: [
        {
          //This is the FIND YOUR(Merchant) INVENTORY -> DO i NEED THIS OR DOES IT AUTOMATICALLY HAVE THE OWNERID?? -> I THINK IT DOES.. <- WRONG
          name: 'ownerIdupdatedAt',
          properties: [{ $ownerId: 'asc' }, { $updatedAt: 'asc' }],
          unique: false,
        },
      ],
      properties: {
        items: {
          type: 'string',
          minLength: 0,
          maxLength: 5120, //ROUGHLY 400 CHARS FOR AN ITEM,AMOUNT ANDOVER 20 ITEMS POSSIBLE.
          position: 0,
        }, // JSON STRINGIFY AND PARSE
        itemsImgs: {
          type: 'string',
          minLength: 0,
          maxLength: 5120,
          position: 1,
        }, // JSON STRINGIFY AND PARSE

        // items: {
        // type: 'array',
        // byteArray: true,
        // // minItems: 32,
        // maxItems: 5120,
        //   position: 0,
        // }, // CBOR > JSON

        open: {
          type: 'boolean',
          position: 2,
        },
        // page: {
        //   type: 'integer',
        //   minimum: 0,
        //   maximum: 100,
        //   position: 2,
        // },

        shipOpts: {
          type: 'string',
          minLength: 0,
          maxLength: 2000, //ROUGHLY 50 CHARS FOR AN ITEM,AMOUNT ANDOVER 20 ITEMS POSSIBLE.
          position: 3,
        }, // JSON STRINGIFY AND PARSE
      },

      required: [
        'items',
        'itemsImgs',
        'open',
        'shipOpts',
        '$createdAt',
        '$updatedAt',
      ],
      additionalProperties: false,
    },

    order: {
      //unconfirmed Order
      type: 'object',
      indices: [
        {
          //
          //1) Customer Request -> their sent requests
          //
          //-> DO i NEED THIS OR DOES IT AUTOMATICALLY HAVE THE OWNERID?? -> I THINK IT DOES.. <-WRONG
          //
          name: 'ownerIdtoIdcreatedAt',
          properties: [
            { $ownerId: 'asc' }, // Customer's IdentityId
            { toId: 'asc' },
            { $createdAt: 'asc' },
          ],
          unique: false,
        },

        {
          //Customer Query of Customer's Request - Any Merchant
          name: 'ownerIdcreatedAt',
          properties: [
            { $ownerId: 'asc' }, // Customer's IdentityId
            { $createdAt: 'asc' },
          ],
          unique: false,
        },

        // Merchant query of Customer Requests(most recent)
        
        {
          name: 'toIdcreatedAt',
          properties: [
            { toId: 'asc' }, //the to (USE ARRAY***)
            { $createdAt: 'asc' }, //most recent
          ],
          unique: false,
        },
      ],

      properties: {
        cart: {
          type: 'string',
          minLength: 0,
          maxLength: 5000, //ROUGHLY 50 CHARS FOR AN ITEM,AMOUNT ANDOVER 20 ITEMS POSSIBLE.
          position: 0,
        }, //WE DOING JSON STRINGIFY AND PARSE
        toId: {
          //This is the MerchantId
          type: 'array',
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: 'application/x.dash.dpp.identifier',
          position: 1,
        },
        amt: {
          //So time of request price is recorded.
          type: 'integer',
          minimum: 0,
          maximum: 1000000000000, // 10,000 Dash is max
          position: 2,
        },
        shipping: {
          type: 'string',
          minLength: 0,
          maxLength: 500,
          position: 3,
        }, 
        msg: {
          type: 'string',
          minLength: 0,
          maxLength: 4000,
          position: 4,
        },
      },
      required: [
        'cart',
        'toId',
        'amt',
        'shipping',
        'msg',
        '$createdAt',
        '$updatedAt',
      ],
      additionalProperties: false,
    }, // unconfirmed Order ^^^
    confirm: {
      type: 'object',
      indices: [
        {
          //Customer query of Merchant Confirm
          // HAVE TO CHECK TO MAKE SURE THE $OWNERID IS OF THE MERCHANT AND NOT SOMEONE RANDOM <- ***
          // well this is the merchant so they are pulling, its okay bc pulls requests first and they are your requests but can still pull a rando.. why not put in the query? -> is it because I can only do one range
          name: 'orderId',
          properties: [
            //{ $ownerId: 'asc' }, //This is the merchantID
            { orderId: 'asc' }, //{ $ownerId: 'asc' },
            // of the Customers Request Doc
            //Queries using range operators must also include an orderBy statement
            // { $createdAt: 'asc' } Should only be one. per doc this will be given an array
          ],
          unique: false,
        },
        //Merchant query of MOST RECENT
        {
          //This is the FIND YOUR POSTS -> DO i NEED THIS OR DOES IT AUTOMATICALLY HAVE THE OWNERID?? -> I THINK IT DOES.. <-WRONG
          name: 'ownerIdcreatedAt',
          properties: [{ $ownerId: 'asc' }, { $createdAt: 'asc' }],
          unique: false,
        },
      ],

      properties: {
        orderId: {
          type: 'array',
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: 'application/x.dash.dpp.identifier',
          position: 0,
        },
        toId: {
          //so merchant can tag person ordering if they try and delete
          type: 'array',
          byteArray: true,
          minItems: 32,
          maxItems: 32,
          contentMediaType: 'application/x.dash.dpp.identifier',
          position: 1,
        },
        amt: {
          type: 'integer',
          minimum: 0,
          maximum: 1000000000000, // 10,000 Dash is max
          position: 2,
        },
        cart: {
          type: 'string',
          minLength: 0,
          maxLength: 5000, //ROUGHLY 50 CHARS FOR AN ITEM,AMOUNT ANDOVER 20 ITEMS POSSIBLE.
          position: 3,
        },
        shipping: {
          type: 'string',
          minLength: 0,
          maxLength: 500, //ROUGHLY 50 CHARS FOR AN ITEM,AMOUNT ANDOVER 20 ITEMS POSSIBLE.
          position: 4,
        }, //WE DOING JSON STRINGIFY AND PARSE
        msg: {
          type: 'string',
          minLength: 0,
          maxLength: 4000,
          position: 5,
        },
      },
      required: [
        'orderId',
        'toId',
        'amt',
        'cart',
        'shipping',
        'msg',
        '$createdAt',
        '$updatedAt',
      ],
      additionalProperties: false,
    }, 
  };

  const contract = await platform.contracts.create(contractDocuments, identity);
  console.dir({ contract: contract.toJSON() });

  await platform.contracts.publish(contract, identity);
  return contract;
};

registerContract()
  .then((d) => console.log('Contract registered:\n', d.toJSON()))
  .catch((e) => console.error('Something went wrong:\n', e))
  .finally(() => client.disconnect());
